1.1.1  
CREATE TABLE book(
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(50),
    author VARCHAR(30),
    price DECIMAL(8, 2),
    amount INT
);

1.1.2  
INSERT INTO book (title, author, price, amount) 
VALUES ('Мастер и Маргарита', 'Булгаков М.А.', 670.99, 3);

1.1.3  
INSERT INTO book (title, author, price, amount) 
VALUES ('Белая гвардия', 'Булгаков М.А.', 540.50, 5);

INSERT INTO book (title, author, price, amount) 
VALUES ('Идиот', 'Достоевский Ф.М.', 460.00, 10);

INSERT INTO book (title, author, price, amount) 
VALUES ('Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2);

____________________________________________________________

1.2.1  
SELECT * FROM book;

1.2.2  
SELECT author, title, price FROM book;

1.2.3  
SELECT title AS Название, author AS Автор FROM book;

1.2.4  
SELECT title, amount, 
    1.65 * amount AS pack 
FROM book;

1.2.5  
SELECT title, author, amount, 
    ROUND(0.7 * price, 2) AS new_price 
FROM book;

1.2.6  
SELECT author, title, 
    ROUND(IF(author = "Булгаков М.А.", price * 1.1, 
             IF(author = "Есенин С.А.", price * 1.05, price)), 
          2) AS new_price 
    FROM book;

1.2.7  
SELECT author, title, price
FROM book
WHERE amount < 10;

1.2.8  
SELECT title, author, price, amount 
FROM book
WHERE (price < 500 OR price > 600) AND price * amount > 5000;

1.2.9  
SELECT title, author 
  FROM book
 WHERE price BETWEEN 540.50 AND 800
   AND amount IN (2, 3, 5, 7);

1.2.10  
  SELECT author, title
    FROM book
   WHERE amount BETWEEN 2 AND 14
ORDER BY author DESC, title;

1.2.11  
  SELECT title, author FROM book
   WHERE title LIKE "%_ _%"
         AND (author LIKE "% С.%"
              OR author LIKE "%.С.%")
ORDER BY title;
__________________________________________________________

1.3.1
SELECT DISTINCT amount
FROM book;

1.3.2
  SELECT author as 'Автор', COUNT(author) as 'Различных_книг', SUM(amount) as 'Количество_экземпляров'
    FROM book
GROUP BY author;

1.3.3
  SELECT author,
         MIN(price) AS 'Минимальная_цена',
         MAX(price) AS 'Максимальная_цена',
         AVG(price) AS 'Средняя_цена'
    FROM book
GROUP BY author;

1.3.4
  SELECT author,
         SUM(amount * price) AS Стоимость,
         ROUND(SUM(amount * price) * 0.18 / 1.18, 2) AS НДС,
         ROUND(SUM(amount * price) / 1.18, 2) AS Стоимость_без_НДС
    FROM book
GROUP BY author;

1.3.5
SELECT MIN(price) AS Минимальная_цена,
       MAX(price) AS Максимальная_цена,
       ROUND(AVG(price), 2) AS Средняя_цена
FROM book;

1.3.6
SELECT ROUND(AVG(price), 2)          AS Средняя_цена,
       ROUND(SUM(price * amount), 2) AS Стоимость
  FROM book
 WHERE amount BETWEEN 5 AND 14

1.3.7
   SELECT author,
          SUM(price * amount) AS Стоимость
     FROM book
    WHERE title NOT IN ('Идиот', 'Белая гвардия')
 GROUP BY author
   HAVING Стоимость > 5000
 ORDER BY Стоимость DESC;
____________________________________________________

1.4.1
  SELECT author, title, price
    FROM book
   WHERE price <= (SELECT AVG(price) FROM book)
ORDER BY price DESC;

1.4.2
  SELECT author, title, price
    FROM book
   WHERE price - (SELECT MIN(price) FROM book) <= 150
ORDER BY price;

1.4.3
SELECT author, title, amount
  FROM book
 WHERE amount IN (
                    SELECT amount
                      FROM book
                  GROUP BY amount
                    HAVING COUNT(amount) = 1
              );

1.4.4
SELECT author, title, price
FROM book
WHERE price < ANY (
                     SELECT MIN(price)
                       FROM book
                   GROUP BY author
              );

1.4.5
SELECT title, author, amount, (SELECT MAX(amount) FROM book) - amount AS Заказ
FROM book
HAVING Заказ > 0;
__________________________________________________________________________

1.5.1
CREATE TABLE supply(
    supply_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(50),
    author VARCHAR(30),
    price DECIMAL(8, 2),
    amount INT
);

1.5.2
INSERT INTO supply (title, author, price, amount)
VALUES
    ('Лирика', 'Пастернак Б.Л.', 518.99, 2),
    ('Черный человек', 'Есенин С.А.', 570.20, 6),
    ('Белая гвардия', 'Булгаков М.А.', 540.50, 7),
    ('Идиот', 'Достоевский Ф.М.', 360.80, 3);

1.5.3
INSERT INTO book (title, author, price, amount)
     SELECT title, author, price, amount
       FROM supply
      WHERE author NOT IN ('Булгаков М.А.', 'Достоевский Ф.М.');

1.5.4
INSERT INTO book (title, author, price, amount)
SELECT title, author, price, amount
  FROM supply
 WHERE author NOT IN (
        SELECT author
          FROM book
      );

1.5.5
UPDATE book
   SET price = 0.9 * price
 WHERE amount BETWEEN 5 AND 10;

1.5.6
UPDATE book
   SET buy = IF (buy > amount, amount, buy),
       price = IF (buy < 1, 0.9 * price, price);

1.5.7
UPDATE book, supply
   SET book.amount = book.amount + supply.amount, book.price = (book.price + supply.price) / 2
 WHERE book.title = supply.title AND book.author = supply.author;

1.5.8
DELETE FROM supply
 WHERE author IN (
                      SELECT author
                        FROM book
                    GROUP BY author
                      HAVING SUM(amount) > 10
              );

1.5.9
CREATE TABLE ordering AS
SELECT author,
       title,
       (
       SELECT ROUND(AVG(amount))
         FROM book
       ) AS amount
  FROM book
 WHERE amount < (SELECT ROUND(AVG(amount))
                  FROM book
               );

___________________________________________________________________

1.6.1
   SELECT name, city, per_diem, date_first, date_last
     FROM trip
    WHERE name LIKE "%а %"
 ORDER BY date_last DESC;

1.6.2
  SELECT DISTINCT name
    FROM trip
   WHERE city = 'Москва'
ORDER BY name;

1.6.3
  SELECT DISTINCT city, COUNT(city) AS Количество
    FROM trip
GROUP BY city
ORDER BY city;

1.6.4
SELECT
    city,
    COUNT(city) AS Количество
FROM
    trip
GROUP BY
    city
ORDER BY
    Количество DESC
LIMIT
    2;

1.6.5
SELECT
  name,
  city,
  DATEDIFF(date_last, date_first) + 1 AS "Длительность"
FROM
  trip
WHERE
  city NOT IN (
    "Москва", "Санкт-Петербург"
  )
ORDER BY
  Длительность DESC,
  city DESC;

1.6.6
SELECT
  name,
  city,
  date_first,
  date_last
FROM
  trip
WHERE
  datediff(date_last, date_first) = (
    SELECT
      MIN(
        datediff(date_last, date_first)
      )
    FROM
      trip
  );

1.6.7
SELECT
  name,
  city,
  date_first,
  date_last
FROM
  trip
WHERE
  MONTH(date_first) = MONTH(date_last)
ORDER BY
  city,
  name;

1.6.8
SELECT
  MONTHNAME(date_first) AS Месяц,
  COUNT(date_first) AS Количество
FROM
  trip
GROUP BY
  Месяц
ORDER BY
  Количество DESC,
  Месяц;

1.6.9
SELECT
  name,
  city,
  date_first,
  (
    DATEDIFF(date_last, date_first) + 1
  ) * per_diem AS Сумма
FROM
  trip
WHERE
  MONTHNAME(date_first) = "March"
  OR MONTHNAME(date_first) = "February"
ORDER BY
  name,
  Сумма DESC;

1.6.10
SELECT
  name,
  SUM(
    (
      DATEDIFF(date_last, date_first) + 1
    ) * per_diem
  ) AS Сумма
FROM
  trip
GROUP BY
  name
HAVING
  COUNT(name) > 3
ORDER BY
  Сумма DESC;
__________________________________________

1.7.1
CREATE TABLE fine(
    fine_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(30),
    number_plate VARCHAR(6),
    violation VARCHAR(30),
    sum_fine DECIMAL(8, 2),
    date_violation DATE,
    date_payment DATE
);

1.7.2
INSERT INTO fine VALUES
    (NULL, 'Баранов П.Е.', 'Р523ВТ', 'Превышение скорости(от 40 до 60)', NULL, '2020-02-14', NULL),
    (NULL, 'Абрамова К.А.', 'О111АВ', 'Проезд на запрещающий сигнал', NULL, '2020-02-23', NULL),
    (NULL, 'Яковлев Г.Р.', 'Т330ТТ', 'Проезд на запрещающий сигнал', NULL, '2020-03-03', NULL);

SELECT * FROM fine;

1.7.3
UPDATE
    fine AS f,
    traffic_violation AS tv
SET
    f.sum_fine = tv.sum_fine
WHERE
    f.sum_fine IS Null
    and  tv.violation = f.violation;

1.7.4
SELECT
  name,
  number_plate,
  violation
FROM
  fine
GROUP BY
  name,
  number_plate,
  violation
HAVING
  COUNT(*) > 1
ORDER BY
  name,
  number_plate,
  violation;

1.7.5
UPDATE
  fine,
  // создаем промежуточную таблицу для нахождения повторных нарушений/нарушителей/машин
  (
    SELECT
      name,
      number_plate,
      violation
    FROM
      fine
    GROUP BY
      name,
      number_plate,
      violation
    HAVING
      COUNT(*) > 1
    ORDER BY
      name,
      number_plate,
      violation
  ) AS query_in
SET
  sum_fine = 2 * sum_fine
// по промежуточной таблице ищем соответствующие записи с неоплатами
WHERE
  date_payment is null
  AND query_in.name = fine.name
  AND query_in.number_plate = fine.number_plate
  AND query_in.violation = fine.violation;

1.7.6
UPDATE
    fine,
    payment
SET
    sum_fine = IF(
                    DATEDIFF(payment.date_payment, payment.date_violation) > 20,
                    sum_fine,
                    0.5 * sum_fine
                ),
    fine.date_payment = payment.date_payment
WHERE
    // "выравняются" строки, у которых есть 3 совпадения?
    (fine.name, fine.violation, fine.date_violation)
    = (payment.name, payment.violation, payment.date_violation);

1.7.7
DELETE FROM fine
WHERE date_violation < '2020-02-01';

SELECT * FROM fine;
_______________________________________________
_______________________________________________
_______________________________________________

2.1.1
CREATE TABLE author(
    author_id INT PRIMARY KEY AUTO_INCREMENT,
    name_author VARCHAR(50)
);

2.1.2
INSERT INTO author (title, author, price, amount)
VALUES
    ('Идиот', 'Достоевский Ф.М.', 460, 10),
    ('Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2);

2.1.3
CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(50),
    author_id INT NOT NULL,
    genre_id INT,
    price DECIMAL(8,2),
    amount INT,
    FOREIGN KEY (author_id)  REFERENCES author (author_id),
    FOREIGN KEY (genre_id)  REFERENCES genre (genre_id)
);

2.1.4
CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(50),
    author_id INT NOT NULL,
    genre_id INT,
    price DECIMAL(8,2),
    amount INT,
    FOREIGN KEY (author_id) REFERENCES author (author_id) ON DELETE CASCADE,
    FOREIGN KEY (genre_id) REFERENCES genre (genre_id) ON DELETE SET NULL
);

2.1.5
INSERT INTO book
VALUES
    (NULL, 'Стихотворения и поэмы', 3, 2, 650.00, 15),
    (NULL, 'Черный человек', 3, 2, 570.20, 6),
    (NULL, 'Лирика', 4, 2, 518.99, 2);

2.2.1
SELECT
  title,
  name_genre,
  price
FROM
  book
  INNER JOIN genre ON book.genre_id = genre.genre_id
WHERE
  amount > 8
ORDER BY
  price DESC;

2.2.2
SELECT
  name_genre
FROM
  genre
  LEFT JOIN book ON genre.genre_id = book.genre_id
WHERE
  amount is NULL;

2.2.3
SELECT
    city.name_city,
    author.name_author,
    DATE_ADD('2020-01-01',INTERVAL FLOOR(RAND() * 365) DAY) AS Дата
FROM
    author,
    city
ORDER BY
    city.name_city,
    Дата DESC;

2.2.4
SELECT
    name_genre,
    title,
    name_author
FROM
    book
    INNER JOIN genre ON book.genre_id = genre.genre_id
    INNER JOIN author ON book.author_id = author.author_id
WHERE
    name_genre = 'Роман'
ORDER BY
    title;

2.2.5
SELECT
    name_author,
    SUM(amount) AS Количество
FROM
    author
    LEFT JOIN book ON author.author_id = book.author_id
GROUP BY
    name_author
HAVING
    Количество < 10
    OR Количество is NULL
ORDER BY
    Количество;

2.2.6
SELECT
    name_author
FROM
    (SELECT
        author_id,
        COUNT(DISTINCT genre_id) AS genre_number
    FROM
        book
    GROUP BY
        author_id
    HAVING
        genre_number = 1
    ) AS one_love_author
    JOIN author ON author.author_id = one_love_author.author_id
ORDER BY
    name_author;

2.2.7
SELECT
  title,
  name_author,
  name_genre,
  price,
  amount

FROM
  author
  INNER JOIN book ON author.author_id = book.author_id
  INNER JOIN genre ON book.genre_id = genre.genre_id

WHERE
  genre.genre_id IN (

    /* выбираем автора, если он пишет книги в самых популярных жанрах*/
    SELECT
      query_in_1.genre_id
    FROM

      (
        /* выбираем код жанра и количество произведений, относящихся к нему */
        SELECT
          genre_id,
          SUM(amount) AS sum_amount
        FROM
          book
        GROUP BY
          genre_id
      ) query_in_1

      INNER JOIN

      (
      /* выбираем запись, в которой указан код жанр с максимальным количеством книг */
      SELECT
        genre_id,
        SUM(amount) AS sum_amount
      FROM
        book
      GROUP BY
        genre_id
      ORDER BY
        sum_amount DESC
      LIMIT
        1
        ) query_in_2 ON query_in_1.sum_amount = query_in_2.sum_amount
  )

ORDER BY
  title;

2.2.8
SELECT
    book.title AS Название,
    name_author AS Автор,
    book.amount + supply.amount AS Количество
FROM
    book
    INNER JOIN author ON book.author_id = author.author_id
    INNER JOIN supply ON book.title = supply.title
                         and author.name_author = supply.author
                         and book.price = supply.price;
________________________________

2.3.1
UPDATE book
    INNER JOIN author ON book.author_id = author.author_id
    INNER JOIN supply ON book.title = supply.title
                        AND supply.author = author.name_author
SET book.amount = book.amount + supply.amount,
    supply.amount = 0,
    book.price = (book.price * book.amount + supply.price * supply.amount) / (book.amount + supply.amount)
WHERE book.price != supply.price;

2.3.2
INSERT INTO author (author.name_author)
SELECT supply.author
FROM
    author
    RIGHT JOIN supply ON author.name_author = supply.author
WHERE author.name_author IS Null;

2.3.3
INSERT INTO book
SELECT
    NULL AS book_id,
    title,
    author_id,
    NULL AS genre_id,
    price,
    amount
FROM
    author
    INNER JOIN supply ON author.name_author = supply.author
WHERE amount <> 0;

2.3.4
UPDATE book
SET genre_id =
      (
       SELECT genre_id
       FROM genre
       WHERE name_genre = 'Поэзия'
      )
WHERE book.title = 'Стихотворения и поэмы';

UPDATE book
SET genre_id =
      (
       SELECT genre_id
       FROM genre
       WHERE name_genre = 'Приключения'
      )
WHERE book.title = 'Остров сокровищ';

SELECT * FROM book;

2.3.5
DELETE FROM
    author
WHERE
    author_id IN (SELECT
                        author_id
                    FROM
                        book
                    GROUP BY
                        author_id
                    HAVING
                        SUM(amount) < 20
                   );

2.3.6
DELETE FROM
    genre
WHERE
    genre.genre_id IN (SELECT
                        genre_id
                        FROM
                            book
                        GROUP BY
                            genre_id
                        HAVING
                            COUNT(book.title) < 4
                       );

2.3.7
DELETE FROM
    author
USING
    author
    INNER JOIN book ON author.author_id = book.author_id
    INNER JOIN genre ON genre.genre_id = book.genre_id
WHERE
    genre.name_genre = 'Поэзия';
____________________________________________________

2.4.1
SELECT
    buy.buy_id,
    book.title,
    book.price,
    buy_book.amount
FROM
    buy_book
    INNER JOIN buy USING (buy_id)
    INNER JOIN book USING (book_id)
    INNER JOIN client USING (client_id)
WHERE
    client.name_client LIKE '%Баранов%Павел%'
ORDER BY
    buy.buy_id,
    book.title;

2.4.2
SELECT
    author.name_author,
    book.title,
    COUNT(buy_book.book_id) AS Количество
FROM
    book
    LEFT JOIN buy_book USING (book_id)
    INNER JOIN author USING (author_id)
GROUP BY
    book.book_id
ORDER BY
    author.name_author,
    book.title;

2.4.3
SELECT
    city.name_city,
    COUNT(buy.buy_id) AS Количество
FROM
    client
    INNER JOIN buy USING (client_id)
    INNER JOIN city USING (city_id)
GROUP BY
    city.city_id
ORDER BY
    Количество DESC,
    city.name_city;

2.4.4
SELECT
    buy_step.buy_id,
    buy_step.date_step_end
FROM
    step
    INNER JOIN buy_step
    ON step.step_id = buy_step.step_id
    AND buy_step.date_step_end IS NOT NULL
    AND step.name_step = 'Оплата';

2.4.5
SELECT
    buy.buy_id,
    client.name_client,
    SUM(buy_book.amount * book.price) AS Стоимость
FROM
    client
    INNER JOIN buy USING (client_id)
    INNER JOIN buy_book USING (buy_id)
    INNER JOIN book USING (book_id)
GROUP BY
    buy.buy_id
ORDER BY
    buy.buy_id;
//почему нет ошибки: client.name_client не участвует ни в группировкеЮ ни в агрегировании?

2.4.6
SELECT
    buy_step.buy_id,
    step.name_step
FROM
    step
    INNER JOIN buy_step ON step.step_id = buy_step.step_id
WHERE
    buy_step.date_step_beg IS NOT NULL and  buy_step.date_step_end IS NULL
ORDER BY
    buy_step.buy_id

2.4.7
SELECT
    buy_step.buy_id,
    DATEDIFF(buy_step.date_step_end, buy_step.date_step_beg) AS Количество_дней,
    IF(DATEDIFF(buy_step.date_step_end, buy_step.date_step_beg) > city.days_delivery
       , DATEDIFF(buy_step.date_step_end, buy_step.date_step_beg) - city.days_delivery
       , 0
    ) AS Опоздание
FROM
    buy_step
    INNER JOIN step ON step.step_id = buy_step.step_id
    INNER JOIN buy ON buy.buy_id = buy_step.buy_id
    INNER JOIN client ON client.client_id = buy.client_id
    INNER JOIN city ON client.city_id = city.city_id
WHERE
    step.name_step = "Транспортировка"
    AND buy_step.date_step_beg IS NOT NULL
    AND buy_step.date_step_end IS NOT NULL
ORDER BY
    buy_step.buy_id;

2.4.8
SELECT
    DISTINCT client.name_client
FROM
    buy_book
    INNER JOIN book USING (book_id)
    INNER JOIN author ON author.author_id = book.author_id AND author.name_author LIKE "Достоевский%"
    INNER JOIN buy USING (buy_id)
    INNER JOIN client USING (client_id)
ORDER BY
    client.name_client;

2.4.9
SELECT
    genre.name_genre AS name_genre,
    SUM(buy_book.amount) AS Количество
FROM
    buy_book
    INNER JOIN book USING (book_id)
    INNER JOIN genre USING (genre_id)
GROUP BY
    genre.genre_id
HAVING
    Количество
    = (
        SELECT
           MAX(Количества) AS Максимальное_количество
        FROM(
            SELECT
                SUM(buy_book.amount) AS Количества
            FROM
                buy_book
                INNER JOIN book USING (book_id)
                INNER JOIN genre USING (genre_id)
            GROUP BY
                genre.genre_id
        ) AS Таблица_количеств
    )
;
________________________________________________

2.5.1
INSERT INTO
    client (client.name_client, client.city_id, client.email)
SELECT
    'Попов Илья'
    , city_id
    , 'popov@test'
FROM
    city
WHERE
    city.name_city = 'Москва';

2.5.2
INSERT INTO
    buy (buy.buy_description, client_id)
SELECT
    "Связаться со мной по вопросу доставки"
    , client_id
FROM
    client
WHERE
    client.name_client = "Попов Илья";

2.5.3
INSERT INTO
    buy_book (buy_book.book_id, buy_book.buy_id, buy_book.amount)
SELECT
    book_id
    , 5
    , 2
FROM
    book
    , author
WHERE
    author.name_author LIKE "Пастернак%"
    AND book.title = "Лирика";

INSERT INTO
    buy_book (buy_book.book_id, buy_book.buy_id, buy_book.amount)
SELECT
    book_id
    , 5
    , 1
FROM
    book
    , author
WHERE
    author.name_author LIKE "Булгаков%"
    AND book.title = "Белая гвардия";

2.5.4
UPDATE
    book
    JOIN buy_book
    ON buy_book.book_id = book.book_id
SET
    book.amount = book.amount - buy_book.amount
WHERE
    buy_book.buy_id = 5;


--------------------------------------
--------------------------------------

3.1.1
SELECT
    st.name_student,
    att.date_attempt,
    att.result
FROM
    attempt AS att
    JOIN student AS st USING (student_id)
    JOIN subject AS sub USING (subject_id)
WHERE
    sub.name_subject = "Основы баз данных"
ORDER BY
    att.result DESC;

3.1.2
SELECT
    subject.name_subject,
    COUNT(attempt.attempt_id) AS Количество,
    ROUND(AVG(attempt.result), 2) AS Среднее
FROM
    attempt
    RIGHT JOIN subject USING(subject_id)
GROUP BY
    subject_id
ORDER BY
    Среднее DESC;

3.1.3
SELECT
    DISTINCT student.name_student,
    result
FROM
    attempt
    JOIN student USING(student_id)
WHERE
    attempt.result = (SELECT
                          MAX(result)
                      FROM
                          attempt
    )
ORDER BY
    student.name_student



